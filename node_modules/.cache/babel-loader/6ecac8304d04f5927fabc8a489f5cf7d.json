{"ast":null,"code":"var _jsxFileName = \"E:\\\\surbhi_office\\\\employee_crud\\\\src\\\\Components\\\\uploadFun.js\";\nimport React, { useMemo, useEffect, useState, Component } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadImage = ImgDoc => {\n  class NewImgDoc extends Component {\n    constructor(...args) {\n      super(...args);\n      this.thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: thumb,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: thumbInner,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: file.preview,\n            style: img\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this)\n      }, file.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this));\n      this.filespath = acceptedFiles.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [file.path, \" - \", file.size, \" bytes\"]\n      }, file.path, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this));\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(ImgDoc, {\n        hocname: \"NAMes\",\n        hocthumbsname: this.thumbs,\n        hocfilepath: this.filespath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 16\n      }, this);\n    }\n\n  }\n\n  return NewImgDoc;\n};\n\n_c = UploadImage;\nexport default UploadImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["E:/surbhi_office/employee_crud/src/Components/uploadFun.js"],"names":["React","useMemo","useEffect","useState","Component","useDropzone","UploadImage","ImgDoc","NewImgDoc","thumbs","files","map","file","thumb","thumbInner","preview","img","name","filespath","acceptedFiles","path","size","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA4CC,SAA5C,QAA4D,OAA5D;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;;AAGA,MAAMC,WAAW,GAAGC,MAAM,IAAI;AAC1B,QAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAAA;AAAA;AAAA,WAElCK,MAFkC,GAEzBC,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACnB;AAAK,QAAA,KAAK,EAAEC,KAAZ;AAAA,+BACE;AAAK,UAAA,KAAK,EAAEC,UAAZ;AAAA,iCACE;AACE,YAAA,GAAG,EAAEF,IAAI,CAACG,OADZ;AAEE,YAAA,KAAK,EAAEC;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,SAAwBJ,IAAI,CAACK,IAA7B;AAAA;AAAA;AAAA;AAAA,cADK,CAFyB;AAAA,WAkBlCC,SAlBkC,GAkBtBC,aAAa,CAACR,GAAd,CAAkBC,IAAI,iBAC9B;AAAA,mBACGA,IAAI,CAACQ,IADR,SACiBR,IAAI,CAACS,IADtB;AAAA,SAAST,IAAI,CAACQ,IAAd;AAAA;AAAA;AAAA;AAAA,cADQ,CAlBsB;AAAA;;AAwBlCE,IAAAA,MAAM,GAAG;AACL,0BAAO,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,OAAhB;AAAwB,QAAA,aAAa,EAAE,KAAKb,MAA5C;AAAoD,QAAA,WAAW,EAAE,KAAKS;AAAtE;AAAA;AAAA;AAAA;AAAA,cAAP;AACC;;AA1B6B;;AA4BlC,SAAOV,SAAP;AACH,CA9BD;;KAAMF,W;AAgCN,eAAeA,WAAf","sourcesContent":["import React , {useMemo,useEffect, useState,Component} from \"react\";\r\nimport {useDropzone} from \"react-dropzone\";\r\n\r\n\r\nconst UploadImage = ImgDoc => {\r\n    class NewImgDoc extends Component {\r\n    \r\n    thumbs = files.map(file => (\r\n        <div style={thumb} key={file.name}>\r\n          <div style={thumbInner}>\r\n            <img\r\n              src={file.preview}\r\n              style={img}\r\n            />\r\n          </div>\r\n        </div>\r\n      ));\r\n    \r\n    //   useEffect(() => () => {\r\n    //     // Make sure to revoke the data uris to avoid memory leaks\r\n    //     files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    //   }, [files]);\r\n\r\n    filespath = acceptedFiles.map(file => (\r\n        <li key={file.path}>\r\n          {file.path} - {file.size} bytes\r\n        </li>\r\n      ));\r\n\r\n    render() {\r\n        return <ImgDoc hocname=\"NAMes\" hocthumbsname={this.thumbs} hocfilepath={this.filespath}/> \r\n        }\r\n    }\r\n    return NewImgDoc;\r\n};\r\n\r\nexport default UploadImage;"]},"metadata":{},"sourceType":"module"}